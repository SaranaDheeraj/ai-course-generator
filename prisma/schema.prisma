generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "Account_userId_index")  // Updated index name
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "Session_userId_index")  // Updated index name
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  credits       Int       @default(10)
  accounts      Account[]
  sessions      Session[]
}


model Course {
  id     String    @id @default(cuid())
  name   String
  image  String
  units  Unit[]
}

model Unit {
  id       String    @id @default(cuid())
  courseId String
  name     String
  course   Course    @relation(fields: [courseId], references: [id])
  chapters Chapter[]

  @@index([courseId], name: "Unit_courseId_index")  // Updated index name
}

model Chapter {
  id                 String    @id @default(cuid())
  unitId             String
  name               String
  youtubeSearchQuery String 
  videoId            String?
  summary            String?   @db.VarChar(3000)
  unit               Unit      @relation(fields: [unitId], references: [id])

  @@index([unitId], name: "Chapter_unitId_index")  // Updated index name
}
