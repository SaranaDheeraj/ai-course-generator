// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
}
 
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}
 
// Updated Account model with unique index name for userId
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId], name: "accountUserIdIndex") // Unique index name for userId

  @@unique([provider, providerAccountId])
}

// Updated Session model with unique index name for userId
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId], name: "sessionUserIdIndex") // Unique index name for userId
}

// Updated User model with unique index name for email
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  credits       Int       @default(10)
  accounts      Account[]
  sessions      Session[]

  @@index([email], name: "userEmailIndex") // Unique index name for email
}


model Course{
  id            String    @id @default(cuid())
  name          String
  image         String
  units         Unit[]
}

model Unit{
  id            String    @id @default(cuid())
  courseId      String
  name          String
  course        Course    @relation(fields: [courseId], references:[id])
  chapters      Chapter[]
  @@index([courseId], name:"courseId")
}

// Updated Chapter model with opposite relation to Question
model Chapter {
  id                 String    @id @default(cuid())
  unitId             String
  name               String
  youtubeSearchQuery String 
  videoId            String?
  summary            String?   @db.VarChar(3000)
  unit               Unit      @relation(fields: [unitId], references: [id])
  questions          Question[] // Define the opposite relation field

  @@index([unitId], name: "unitId")
}

// Updated Question model with relation and index
model Question {
  id                String    @id @default(cuid())
  chapterId         String
  question          String    @db.VarChar(3000)
  answer            String    @db.VarChar(3000)
  options           String    @db.VarChar(3000)
  chapter           Chapter   @relation(fields: [chapterId], references: [id])

  @@index([chapterId], name: "chapterId")
}
